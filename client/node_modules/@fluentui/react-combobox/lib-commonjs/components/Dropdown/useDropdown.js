"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "useDropdown_unstable", {
    enumerable: true,
    get: function() {
        return useDropdown_unstable;
    }
});
const _interop_require_wildcard = require("@swc/helpers/_/_interop_require_wildcard");
const _react = /*#__PURE__*/ _interop_require_wildcard._(require("react"));
const _reactfield = require("@fluentui/react-field");
const _reacticons = require("@fluentui/react-icons");
const _reactutilities = require("@fluentui/react-utilities");
const _useComboboxBaseState = require("../../utils/useComboboxBaseState");
const _useComboboxPositioning = require("../../utils/useComboboxPositioning");
const _Listbox = require("../Listbox/Listbox");
const _useListboxSlot = require("../../utils/useListboxSlot");
const _useButtonTriggerSlot = require("./useButtonTriggerSlot");
const useDropdown_unstable = (props, ref)=>{
    // Merge props from surrounding <Field>, if any
    props = (0, _reactfield.useFieldControlProps_unstable)(props, {
        supportsLabelFor: true,
        supportsSize: true
    });
    const baseState = (0, _useComboboxBaseState.useComboboxBaseState)(props);
    const { open } = baseState;
    const { primary: triggerNativeProps, root: rootNativeProps } = (0, _reactutilities.getPartitionedNativeProps)({
        props,
        primarySlotTagName: 'button',
        excludedPropNames: [
            'children'
        ]
    });
    const [comboboxPopupRef, comboboxTargetRef] = (0, _useComboboxPositioning.useComboboxPositioning)(props);
    const triggerRef = _react.useRef(null);
    const listbox = (0, _useListboxSlot.useListboxSlot)(props.listbox, comboboxPopupRef, {
        state: baseState,
        triggerRef,
        defaultProps: {
            children: props.children
        }
    });
    var _props_button;
    const trigger = (0, _useButtonTriggerSlot.useButtonTriggerSlot)((_props_button = props.button) !== null && _props_button !== void 0 ? _props_button : {}, (0, _reactutilities.useMergedRefs)(triggerRef, ref), {
        state: baseState,
        defaultProps: {
            type: 'button',
            tabIndex: 0,
            children: baseState.value || props.placeholder,
            ...triggerNativeProps
        }
    });
    const rootSlot = _reactutilities.slot.always(props.root, {
        defaultProps: {
            'aria-owns': !props.inlinePopup && open ? listbox === null || listbox === void 0 ? void 0 : listbox.id : undefined,
            children: props.children,
            ...rootNativeProps
        },
        elementType: 'div'
    });
    rootSlot.ref = (0, _reactutilities.useMergedRefs)(rootSlot.ref, comboboxTargetRef);
    const state = {
        components: {
            root: 'div',
            button: 'button',
            expandIcon: 'span',
            listbox: _Listbox.Listbox
        },
        root: rootSlot,
        button: trigger,
        listbox: open ? listbox : undefined,
        expandIcon: _reactutilities.slot.optional(props.expandIcon, {
            renderByDefault: true,
            defaultProps: {
                children: /*#__PURE__*/ _react.createElement(_reacticons.ChevronDownRegular, null)
            },
            elementType: 'span'
        }),
        placeholderVisible: !baseState.value && !!props.placeholder,
        ...baseState
    };
    return state;
};
