{"version":3,"sources":["useTriggerSlot.ts"],"sourcesContent":["import * as React from 'react';\nimport { mergeCallbacks, slot, useMergedRefs } from '@fluentui/react-utilities';\nimport type { ExtractSlotProps, Slot, SlotComponentType } from '@fluentui/react-utilities';\nimport { getDropdownActionFromKey, getIndexFromAction } from '../utils/dropdownKeyActions';\nimport type { ComboboxBaseState } from './ComboboxBase.types';\n\nexport type UseTriggerSlotState = Pick<\n  ComboboxBaseState,\n  | 'activeOption'\n  | 'getCount'\n  | 'getIndexOfId'\n  | 'getOptionAtIndex'\n  | 'open'\n  | 'selectOption'\n  | 'setActiveOption'\n  | 'setFocusVisible'\n  | 'setOpen'\n  | 'multiselect'\n  | 'value'\n>;\n\ntype UseTriggerSlotOptions = {\n  state: UseTriggerSlotState;\n  defaultProps: unknown;\n};\n\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'button'>>,\n  ref: React.Ref<HTMLButtonElement>,\n  options: UseTriggerSlotOptions & { elementType: 'button' },\n): SlotComponentType<ExtractSlotProps<Slot<'button'>>>;\n\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'input'>>,\n  ref: React.Ref<HTMLInputElement>,\n  options: UseTriggerSlotOptions & { elementType: 'input' },\n): SlotComponentType<ExtractSlotProps<Slot<'input'>>>;\n\n/**\n * Shared trigger behaviour for combobox and dropdown\n * @returns trigger slot with desired behaviour and props\n */\nexport function useTriggerSlot(\n  triggerSlotFromProp: NonNullable<Slot<'input'>> | NonNullable<Slot<'button'>>,\n  ref: React.Ref<HTMLButtonElement> | React.Ref<HTMLInputElement>,\n  options: UseTriggerSlotOptions & { elementType: 'input' | 'button' },\n): SlotComponentType<ExtractSlotProps<Slot<'button'>>> | SlotComponentType<ExtractSlotProps<Slot<'input'>>> {\n  const {\n    state: {\n      activeOption,\n      getCount,\n      getIndexOfId,\n      getOptionAtIndex,\n      open,\n      selectOption,\n      setActiveOption,\n      setFocusVisible,\n      setOpen,\n      multiselect,\n    },\n    defaultProps,\n    elementType,\n  } = options;\n\n  const trigger = slot.always(triggerSlotFromProp, {\n    defaultProps: {\n      type: 'text',\n      'aria-expanded': open,\n      'aria-activedescendant': open ? activeOption?.id : undefined,\n      role: 'combobox',\n      ...(typeof defaultProps === 'object' && defaultProps),\n    },\n    elementType,\n  });\n\n  // handle trigger focus/blur\n  const triggerRef = React.useRef<HTMLButtonElement | HTMLInputElement>(null);\n  trigger.ref = useMergedRefs(triggerRef, trigger.ref, ref) as React.Ref<HTMLButtonElement & HTMLInputElement>;\n\n  // the trigger should open/close the popup on click or blur\n  trigger.onBlur = mergeCallbacks((event: React.FocusEvent<HTMLButtonElement> & React.FocusEvent<HTMLInputElement>) => {\n    setOpen(event, false);\n  }, trigger.onBlur);\n\n  trigger.onClick = mergeCallbacks(\n    (event: React.MouseEvent<HTMLButtonElement> & React.MouseEvent<HTMLInputElement>) => {\n      setOpen(event, !open);\n    },\n    trigger.onClick,\n  );\n\n  // handle combobox keyboard interaction\n  trigger.onKeyDown = mergeCallbacks(\n    (event: React.KeyboardEvent<HTMLButtonElement> & React.KeyboardEvent<HTMLInputElement>) => {\n      const action = getDropdownActionFromKey(event, { open, multiselect });\n      const maxIndex = getCount() - 1;\n      const activeIndex = activeOption ? getIndexOfId(activeOption.id) : -1;\n      let newIndex = activeIndex;\n\n      switch (action) {\n        case 'Open':\n          event.preventDefault();\n          setFocusVisible(true);\n          setOpen(event, true);\n          break;\n        case 'Close':\n          // stop propagation for escape key to avoid dismissing any parent popups\n          event.stopPropagation();\n          event.preventDefault();\n          setOpen(event, false);\n          break;\n        case 'CloseSelect':\n          !multiselect && !activeOption?.disabled && setOpen(event, false);\n        // fallthrough\n        case 'Select':\n          activeOption && selectOption(event, activeOption);\n          event.preventDefault();\n          break;\n        case 'Tab':\n          !multiselect && activeOption && selectOption(event, activeOption);\n          break;\n        default:\n          newIndex = getIndexFromAction(action, activeIndex, maxIndex);\n      }\n      if (newIndex !== activeIndex) {\n        // prevent default page scroll/keyboard action if the index changed\n        event.preventDefault();\n        setActiveOption(getOptionAtIndex(newIndex));\n        setFocusVisible(true);\n      }\n    },\n    trigger.onKeyDown,\n  );\n\n  trigger.onMouseOver = mergeCallbacks(\n    (event: React.MouseEvent<HTMLButtonElement> & React.MouseEvent<HTMLInputElement>) => {\n      setFocusVisible(false);\n    },\n    trigger.onMouseOver,\n  );\n\n  // TODO fix cast\n  return trigger as SlotComponentType<ExtractSlotProps<Slot<'input'>>>;\n}\n"],"names":["React","mergeCallbacks","slot","useMergedRefs","getDropdownActionFromKey","getIndexFromAction","useTriggerSlot","triggerSlotFromProp","ref","options","state","activeOption","getCount","getIndexOfId","getOptionAtIndex","open","selectOption","setActiveOption","setFocusVisible","setOpen","multiselect","defaultProps","elementType","trigger","always","type","id","undefined","role","triggerRef","useRef","onBlur","event","onClick","onKeyDown","action","maxIndex","activeIndex","newIndex","preventDefault","stopPropagation","disabled","onMouseOver"],"mappings":"AAAA,YAAYA,WAAW,QAAQ;AAC/B,SAASC,cAAc,EAAEC,IAAI,EAAEC,aAAa,QAAQ,4BAA4B;AAEhF,SAASC,wBAAwB,EAAEC,kBAAkB,QAAQ,8BAA8B;AAmC3F;;;CAGC,GACD,OAAO,SAASC,eACdC,mBAA6E,EAC7EC,GAA+D,EAC/DC,OAAoE;IAEpE,MAAM,EACJC,OAAO,EACLC,YAAY,EACZC,QAAQ,EACRC,YAAY,EACZC,gBAAgB,EAChBC,IAAI,EACJC,YAAY,EACZC,eAAe,EACfC,eAAe,EACfC,OAAO,EACPC,WAAW,EACZ,EACDC,YAAY,EACZC,WAAW,EACZ,GAAGb;IAEJ,MAAMc,UAAUrB,KAAKsB,MAAM,CAACjB,qBAAqB;QAC/Cc,cAAc;YACZI,MAAM;YACN,iBAAiBV;YACjB,yBAAyBA,OAAOJ,yBAAAA,mCAAAA,aAAce,EAAE,GAAGC;YACnDC,MAAM;YACN,GAAI,OAAOP,iBAAiB,YAAYA,YAAY;QACtD;QACAC;IACF;IAEA,4BAA4B;IAC5B,MAAMO,aAAa7B,MAAM8B,MAAM,CAAuC;IACtEP,QAAQf,GAAG,GAAGL,cAAc0B,YAAYN,QAAQf,GAAG,EAAEA;IAErD,2DAA2D;IAC3De,QAAQQ,MAAM,GAAG9B,eAAe,CAAC+B;QAC/Bb,QAAQa,OAAO;IACjB,GAAGT,QAAQQ,MAAM;IAEjBR,QAAQU,OAAO,GAAGhC,eAChB,CAAC+B;QACCb,QAAQa,OAAO,CAACjB;IAClB,GACAQ,QAAQU,OAAO;IAGjB,uCAAuC;IACvCV,QAAQW,SAAS,GAAGjC,eAClB,CAAC+B;QACC,MAAMG,SAAS/B,yBAAyB4B,OAAO;YAAEjB;YAAMK;QAAY;QACnE,MAAMgB,WAAWxB,aAAa;QAC9B,MAAMyB,cAAc1B,eAAeE,aAAaF,aAAae,EAAE,IAAI,CAAC;QACpE,IAAIY,WAAWD;QAEf,OAAQF;YACN,KAAK;gBACHH,MAAMO,cAAc;gBACpBrB,gBAAgB;gBAChBC,QAAQa,OAAO;gBACf;YACF,KAAK;gBACH,wEAAwE;gBACxEA,MAAMQ,eAAe;gBACrBR,MAAMO,cAAc;gBACpBpB,QAAQa,OAAO;gBACf;YACF,KAAK;gBACH,CAACZ,eAAe,EAACT,yBAAAA,mCAAAA,aAAc8B,QAAQ,KAAItB,QAAQa,OAAO;YAC5D,cAAc;YACd,KAAK;gBACHrB,gBAAgBK,aAAagB,OAAOrB;gBACpCqB,MAAMO,cAAc;gBACpB;YACF,KAAK;gBACH,CAACnB,eAAeT,gBAAgBK,aAAagB,OAAOrB;gBACpD;YACF;gBACE2B,WAAWjC,mBAAmB8B,QAAQE,aAAaD;QACvD;QACA,IAAIE,aAAaD,aAAa;YAC5B,mEAAmE;YACnEL,MAAMO,cAAc;YACpBtB,gBAAgBH,iBAAiBwB;YACjCpB,gBAAgB;QAClB;IACF,GACAK,QAAQW,SAAS;IAGnBX,QAAQmB,WAAW,GAAGzC,eACpB,CAAC+B;QACCd,gBAAgB;IAClB,GACAK,QAAQmB,WAAW;IAGrB,gBAAgB;IAChB,OAAOnB;AACT"}