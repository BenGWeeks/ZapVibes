{"ast":null,"code":"import { __extends } from \"tslib\";\nimport * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nimport { getScrollUtils } from './util/scroll';\nimport { isLessThanInRange } from './util/comparison';\n// Pixels\nvar COMPARISON_RANGE = 1;\nvar Sticky = /** @class */function (_super) {\n  __extends(Sticky, _super);\n  function Sticky(props) {\n    var _this = _super.call(this, props) || this;\n    _this._root = React.createRef();\n    _this._stickyContentTop = React.createRef();\n    _this._stickyContentBottom = React.createRef();\n    _this._nonStickyContent = React.createRef();\n    _this._placeHolder = React.createRef();\n    _this.syncScroll = function (container) {\n      var nonStickyContent = _this.nonStickyContent;\n      if (nonStickyContent && _this.props.isScrollSynced) {\n        nonStickyContent.scrollLeft = container.scrollLeft;\n      }\n    };\n    _this._getContext = function () {\n      return _this.context;\n    };\n    _this._onScrollEvent = function (container, footerStickyContainer) {\n      if (_this.root && _this.nonStickyContent) {\n        var distanceFromTop = _this._getNonStickyDistanceFromTop(container);\n        var isStickyTop = false;\n        var isStickyBottom = false;\n        if (_this.canStickyTop) {\n          var distanceToStickTop = distanceFromTop - _this._getStickyDistanceFromTop();\n          var containerScrollTop = container.scrollTop;\n          isStickyTop = isLessThanInRange(distanceToStickTop, containerScrollTop, COMPARISON_RANGE);\n        }\n        // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n        // from the top of the pane\n        if (_this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n          isStickyBottom = distanceFromTop - _this._scrollUtils.getScrollTopInRange(container, COMPARISON_RANGE) >= _this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n        }\n        if (document.activeElement && _this.nonStickyContent.contains(document.activeElement) && (_this.state.isStickyTop !== isStickyTop || _this.state.isStickyBottom !== isStickyBottom)) {\n          _this._activeElement = document.activeElement;\n        } else {\n          _this._activeElement = undefined;\n        }\n        _this.setState({\n          isStickyTop: _this.canStickyTop && isStickyTop,\n          isStickyBottom: isStickyBottom,\n          distanceFromTop: distanceFromTop\n        });\n      }\n    };\n    _this._getStickyDistanceFromTop = function () {\n      var distance = 0;\n      if (_this.stickyContentTop) {\n        distance = _this.stickyContentTop.offsetTop;\n      }\n      return distance;\n    };\n    _this._getStickyDistanceFromTopForFooter = function (container, footerStickyVisibleContainer) {\n      var distance = 0;\n      if (_this.stickyContentBottom) {\n        distance = container.clientHeight - footerStickyVisibleContainer.offsetHeight + _this.stickyContentBottom.offsetTop;\n      }\n      return distance;\n    };\n    _this._getNonStickyDistanceFromTop = function (container) {\n      var distance = 0;\n      var currElem = _this.root;\n      if (currElem) {\n        while (currElem && currElem.offsetParent !== container) {\n          distance += currElem.offsetTop;\n          currElem = currElem.offsetParent;\n        }\n        if (currElem && currElem.offsetParent === container) {\n          distance += currElem.offsetTop;\n        }\n      }\n      return distance;\n    };\n    initializeComponentRef(_this);\n    _this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined\n    };\n    _this._activeElement = undefined;\n    _this._scrollUtils = getScrollUtils();\n    return _this;\n  }\n  Object.defineProperty(Sticky.prototype, \"root\", {\n    get: function () {\n      return this._root.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"placeholder\", {\n    get: function () {\n      return this._placeHolder.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentTop\", {\n    get: function () {\n      return this._stickyContentTop.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"stickyContentBottom\", {\n    get: function () {\n      return this._stickyContentBottom.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"nonStickyContent\", {\n    get: function () {\n      return this._nonStickyContent.current;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyTop\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(Sticky.prototype, \"canStickyBottom\", {\n    get: function () {\n      return this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Sticky.prototype.componentDidMount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  };\n  Sticky.prototype.componentWillUnmount = function () {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  };\n  Sticky.prototype.componentDidUpdate = function (prevProps, prevState) {\n    var scrollablePane = this._getContext().scrollablePane;\n    if (!scrollablePane) {\n      return;\n    }\n    var _a = this.state,\n      isStickyBottom = _a.isStickyBottom,\n      isStickyTop = _a.isStickyTop,\n      distanceFromTop = _a.distanceFromTop;\n    var syncScroll = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  };\n  Sticky.prototype.shouldComponentUpdate = function (nextProps, nextState) {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom,\n      distanceFromTop = _a.distanceFromTop;\n    return isStickyTop !== nextState.isStickyTop || isStickyBottom !== nextState.isStickyBottom || this.props.stickyPosition !== nextProps.stickyPosition || this.props.children !== nextProps.children || distanceFromTop !== nextState.distanceFromTop || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) || _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) || _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder);\n  };\n  Sticky.prototype.render = function () {\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom;\n    var _b = this.props,\n      stickyClassName = _b.stickyClassName,\n      children = _b.children;\n    if (!this.context.scrollablePane) {\n      return React.createElement(\"div\", null, this.props.children);\n    }\n    return React.createElement(\"div\", {\n      ref: this._root\n    }, this.canStickyTop && React.createElement(\"div\", {\n      ref: this._stickyContentTop,\n      style: {\n        pointerEvents: isStickyTop ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyTop)\n    })), this.canStickyBottom && React.createElement(\"div\", {\n      ref: this._stickyContentBottom,\n      style: {\n        pointerEvents: isStickyBottom ? 'auto' : 'none'\n      }\n    }, React.createElement(\"div\", {\n      style: this._getStickyPlaceholderHeight(isStickyBottom)\n    })), React.createElement(\"div\", {\n      style: this._getNonStickyPlaceholderHeightAndWidth(),\n      ref: this._placeHolder\n    }, (isStickyTop || isStickyBottom) && React.createElement(\"span\", {\n      style: hiddenContentStyle\n    }, children), React.createElement(\"div\", {\n      ref: this._nonStickyContent,\n      className: isStickyTop || isStickyBottom ? stickyClassName : undefined,\n      style: this._getContentStyles(isStickyTop || isStickyBottom)\n    }, children)));\n  };\n  Sticky.prototype.addSticky = function (stickyContent) {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  };\n  Sticky.prototype.resetSticky = function () {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  };\n  Sticky.prototype.setDistanceFromTop = function (container) {\n    var distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({\n      distanceFromTop: distanceFromTop\n    });\n  };\n  Sticky.prototype._getContentStyles = function (isSticky) {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : ''\n    };\n  };\n  Sticky.prototype._getStickyPlaceholderHeight = function (isSticky) {\n    var height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height\n    };\n  };\n  Sticky.prototype._getNonStickyPlaceholderHeightAndWidth = function () {\n    var _a = this.state,\n      isStickyTop = _a.isStickyTop,\n      isStickyBottom = _a.isStickyBottom;\n    if (isStickyTop || isStickyBottom) {\n      var height = 0;\n      var width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width = this.nonStickyContent.firstElementChild.scrollWidth + (this.nonStickyContent.firstElementChild.offsetWidth - this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height: height,\n        width: width\n      };\n    } else {\n      return {};\n    }\n  };\n  // Gets background of nearest parent element that has a declared background-color attribute\n  Sticky.prototype._getBackground = function () {\n    if (!this.root) {\n      return undefined;\n    }\n    var curr = this.root;\n    while (window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' || window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent') {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  };\n  Sticky.defaultProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true\n  };\n  Sticky.contextType = ScrollablePaneContext;\n  return Sticky;\n}(React.Component);\nexport { Sticky };\nfunction _isOffsetHeightDifferent(a, b) {\n  return a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight;\n}","map":{"version":3,"names":["React","initializeComponentRef","hiddenContentStyle","ScrollablePaneContext","StickyPositionType","getScrollUtils","isLessThanInRange","COMPARISON_RANGE","Sticky","_super","__extends","props","_this","call","_root","createRef","_stickyContentTop","_stickyContentBottom","_nonStickyContent","_placeHolder","syncScroll","container","nonStickyContent","isScrollSynced","scrollLeft","_getContext","context","_onScrollEvent","footerStickyContainer","root","distanceFromTop","_getNonStickyDistanceFromTop","isStickyTop","isStickyBottom","canStickyTop","distanceToStickTop","_getStickyDistanceFromTop","containerScrollTop","scrollTop","canStickyBottom","clientHeight","offsetHeight","_scrollUtils","getScrollTopInRange","_getStickyDistanceFromTopForFooter","document","activeElement","contains","state","_activeElement","undefined","setState","distance","stickyContentTop","offsetTop","footerStickyVisibleContainer","stickyContentBottom","currElem","offsetParent","Object","defineProperty","prototype","get","current","stickyPosition","Both","Header","Footer","componentDidMount","scrollablePane","subscribe","addSticky","componentWillUnmount","unsubscribe","removeSticky","componentDidUpdate","prevProps","prevState","_a","sortSticky","focus","updateStickyRefHeights","syncScrollSticky","shouldComponentUpdate","nextProps","nextState","children","_isOffsetHeightDifferent","render","_b","stickyClassName","createElement","ref","style","pointerEvents","_getStickyPlaceholderHeight","_getNonStickyPlaceholderHeightAndWidth","className","_getContentStyles","stickyContent","appendChild","resetSticky","placeholder","setDistanceFromTop","isSticky","backgroundColor","stickyBackgroundColor","_getBackground","overflow","height","visibility","width","firstElementChild","scrollWidth","offsetWidth","clientWidth","curr","window","getComputedStyle","getPropertyValue","tagName","parentElement","defaultProps","contextType","Component","a","b"],"sources":["/workspaces/ZapVibes/node_modules/@fluentui/react/lib/components/src/components/Sticky/Sticky.tsx"],"sourcesContent":["import * as React from 'react';\nimport { initializeComponentRef } from '../../Utilities';\nimport { hiddenContentStyle } from '../../Styling';\nimport { ScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport { StickyPositionType } from './Sticky.types';\nimport type { IScrollablePaneContext } from '../ScrollablePane/ScrollablePane.types';\nimport type { IStickyProps } from './Sticky.types';\nimport { getScrollUtils } from './util/scroll';\nimport type { ScrollUtils } from './util/scroll';\nimport { isLessThanInRange } from './util/comparison';\n\nexport interface IStickyState {\n  isStickyTop: boolean;\n  isStickyBottom: boolean;\n  distanceFromTop?: number;\n}\n\n// Pixels\nconst COMPARISON_RANGE = 1;\n\nexport class Sticky extends React.Component<IStickyProps, IStickyState> {\n  public static defaultProps: IStickyProps = {\n    stickyPosition: StickyPositionType.Both,\n    isScrollSynced: true,\n  };\n\n  public static contextType = ScrollablePaneContext;\n\n  private _root = React.createRef<HTMLDivElement>();\n  private _stickyContentTop = React.createRef<HTMLDivElement>();\n  private _stickyContentBottom = React.createRef<HTMLDivElement>();\n  private _nonStickyContent = React.createRef<HTMLDivElement>();\n  private _placeHolder = React.createRef<HTMLDivElement>();\n  private _activeElement: HTMLElement | undefined;\n  private _scrollUtils: ScrollUtils;\n\n  constructor(props: IStickyProps) {\n    super(props);\n\n    initializeComponentRef(this);\n    this.state = {\n      isStickyTop: false,\n      isStickyBottom: false,\n      distanceFromTop: undefined,\n    };\n    this._activeElement = undefined;\n    this._scrollUtils = getScrollUtils();\n  }\n\n  public get root(): HTMLDivElement | null {\n    return this._root.current;\n  }\n\n  public get placeholder(): HTMLDivElement | null {\n    return this._placeHolder.current;\n  }\n\n  public get stickyContentTop(): HTMLDivElement | null {\n    return this._stickyContentTop.current;\n  }\n\n  public get stickyContentBottom(): HTMLDivElement | null {\n    return this._stickyContentBottom.current;\n  }\n\n  public get nonStickyContent(): HTMLDivElement | null {\n    return this._nonStickyContent.current;\n  }\n\n  public get canStickyTop(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Header\n    );\n  }\n\n  public get canStickyBottom(): boolean {\n    return (\n      this.props.stickyPosition === StickyPositionType.Both || this.props.stickyPosition === StickyPositionType.Footer\n    );\n  }\n\n  public syncScroll = (container: HTMLElement): void => {\n    const { nonStickyContent } = this;\n\n    if (nonStickyContent && this.props.isScrollSynced) {\n      nonStickyContent.scrollLeft = container.scrollLeft;\n    }\n  };\n\n  public componentDidMount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.subscribe(this._onScrollEvent);\n    scrollablePane.addSticky(this);\n  }\n\n  public componentWillUnmount(): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    scrollablePane.unsubscribe(this._onScrollEvent);\n    scrollablePane.removeSticky(this);\n  }\n\n  public componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void {\n    const { scrollablePane } = this._getContext();\n\n    if (!scrollablePane) {\n      return;\n    }\n\n    const { isStickyBottom, isStickyTop, distanceFromTop } = this.state;\n    let syncScroll: boolean = false;\n    if (prevState.distanceFromTop !== distanceFromTop) {\n      scrollablePane.sortSticky(this, true /*sortAgain*/);\n      syncScroll = true;\n    }\n    if (prevState.isStickyTop !== isStickyTop || prevState.isStickyBottom !== isStickyBottom) {\n      if (this._activeElement) {\n        this._activeElement.focus();\n      }\n      scrollablePane.updateStickyRefHeights();\n      syncScroll = true;\n    }\n    if (syncScroll) {\n      // Sync Sticky scroll position with content container on each update\n      scrollablePane.syncScrollSticky(this);\n    }\n  }\n\n  public shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean {\n    if (!this.context.scrollablePane) {\n      return true;\n    }\n\n    const { isStickyTop, isStickyBottom, distanceFromTop } = this.state;\n\n    return (isStickyTop !== nextState.isStickyTop ||\n      isStickyBottom !== nextState.isStickyBottom ||\n      this.props.stickyPosition !== nextProps.stickyPosition ||\n      this.props.children !== nextProps.children ||\n      distanceFromTop !== nextState.distanceFromTop ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentTop) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._stickyContentBottom) ||\n      _isOffsetHeightDifferent(this._nonStickyContent, this._placeHolder)) as boolean;\n  }\n\n  public render(): JSX.Element {\n    const { isStickyTop, isStickyBottom } = this.state;\n    const { stickyClassName, children } = this.props;\n\n    if (!this.context.scrollablePane) {\n      return <div>{this.props.children}</div>;\n    }\n\n    return (\n      <div ref={this._root}>\n        {this.canStickyTop && (\n          <div ref={this._stickyContentTop} style={{ pointerEvents: isStickyTop ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyTop)} />\n          </div>\n        )}\n        {this.canStickyBottom && (\n          <div ref={this._stickyContentBottom} style={{ pointerEvents: isStickyBottom ? 'auto' : 'none' }}>\n            <div style={this._getStickyPlaceholderHeight(isStickyBottom)} />\n          </div>\n        )}\n        <div style={this._getNonStickyPlaceholderHeightAndWidth()} ref={this._placeHolder}>\n          {(isStickyTop || isStickyBottom) && <span style={hiddenContentStyle as any}>{children}</span>}\n          <div\n            ref={this._nonStickyContent}\n            className={isStickyTop || isStickyBottom ? stickyClassName : undefined}\n            style={this._getContentStyles(isStickyTop || isStickyBottom)}\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  public addSticky(stickyContent: HTMLDivElement): void {\n    if (this.nonStickyContent) {\n      stickyContent.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public resetSticky(): void {\n    if (this.nonStickyContent && this.placeholder) {\n      this.placeholder.appendChild(this.nonStickyContent);\n    }\n  }\n\n  public setDistanceFromTop(container: HTMLDivElement): void {\n    const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n    this.setState({ distanceFromTop });\n  }\n\n  private _getContext = (): IScrollablePaneContext => this.context;\n\n  private _getContentStyles(isSticky: boolean): React.CSSProperties {\n    return {\n      backgroundColor: this.props.stickyBackgroundColor || this._getBackground(),\n      overflow: isSticky ? 'hidden' : '',\n    };\n  }\n\n  private _getStickyPlaceholderHeight(isSticky: boolean): React.CSSProperties {\n    const height = this.nonStickyContent ? this.nonStickyContent.offsetHeight : 0;\n    return {\n      visibility: isSticky ? 'hidden' : 'visible',\n      height: isSticky ? 0 : height,\n    };\n  }\n\n  private _getNonStickyPlaceholderHeightAndWidth(): React.CSSProperties {\n    const { isStickyTop, isStickyBottom } = this.state;\n    if (isStickyTop || isStickyBottom) {\n      let height = 0;\n      let width = 0;\n      // Why is placeholder width needed?\n      // ScrollablePane's content container is reponsible for providing scrollbars depending on content overflow.\n      // - If the overflow is caused by content of sticky component when it is in non-sticky state, the container will\n      //   provide horizontal scrollbar.\n      // - If the component becomes sticky, i.e., when state.isStickyTop || state.isStickyBottom becomes true,\n      //   its actual content is no longer inside the container, so the container will see no need for horizontal\n      //   scrollbar (assuming no other content is causing overflow). The complete content of sticky component will\n      //   not be viewable. So it is necessary to provide a placeholder of a certain width (height is already being set)\n      //   in the container, to get a horizontal scrollbar & be able to view the complete content of sticky component.\n      if (this.nonStickyContent && this.nonStickyContent.firstElementChild) {\n        height = this.nonStickyContent.offsetHeight;\n        // What value should be substituted for placeholder width?\n        // Assumptions:\n        //    1. Content inside <Sticky> should always be wrapped in a single div.\n        //        <Sticky><div id={'firstElementChild'}>{intended_content}</div><Sticky/>\n        //    2. -ve padding, margin, etc. are not be used.\n        //    3. scrollWidth of a parent is greater than or equal to max of scrollWidths of its children, and same holds\n        //       for children.\n        // placeholder width should be computed in the best possible way to prevent overscroll/underscroll.\n        width =\n          this.nonStickyContent.firstElementChild.scrollWidth +\n          ((this.nonStickyContent.firstElementChild as HTMLElement).offsetWidth -\n            this.nonStickyContent.firstElementChild.clientWidth);\n      }\n      return {\n        height,\n        width,\n      };\n    } else {\n      return {};\n    }\n  }\n\n  private _onScrollEvent = (container: HTMLElement, footerStickyContainer: HTMLElement): void => {\n    if (this.root && this.nonStickyContent) {\n      const distanceFromTop = this._getNonStickyDistanceFromTop(container);\n      let isStickyTop = false;\n      let isStickyBottom = false;\n\n      if (this.canStickyTop) {\n        const distanceToStickTop = distanceFromTop - this._getStickyDistanceFromTop();\n        const containerScrollTop = container.scrollTop;\n        isStickyTop = isLessThanInRange(distanceToStickTop, containerScrollTop, COMPARISON_RANGE);\n      }\n\n      // Can sticky bottom if the scrollablePane - total sticky footer height is smaller than the sticky's distance\n      // from the top of the pane\n      if (this.canStickyBottom && container.clientHeight - footerStickyContainer.offsetHeight <= distanceFromTop) {\n        isStickyBottom =\n          distanceFromTop - this._scrollUtils.getScrollTopInRange(container, COMPARISON_RANGE) >=\n          this._getStickyDistanceFromTopForFooter(container, footerStickyContainer);\n      }\n\n      if (\n        document.activeElement &&\n        this.nonStickyContent.contains(document.activeElement) &&\n        (this.state.isStickyTop !== isStickyTop || this.state.isStickyBottom !== isStickyBottom)\n      ) {\n        this._activeElement = document.activeElement as HTMLElement;\n      } else {\n        this._activeElement = undefined;\n      }\n\n      this.setState({\n        isStickyTop: this.canStickyTop && isStickyTop,\n        isStickyBottom,\n        distanceFromTop,\n      });\n    }\n  };\n\n  private _getStickyDistanceFromTop = (): number => {\n    let distance = 0;\n    if (this.stickyContentTop) {\n      distance = this.stickyContentTop.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getStickyDistanceFromTopForFooter = (\n    container: HTMLElement,\n    footerStickyVisibleContainer: HTMLElement,\n  ): number => {\n    let distance = 0;\n    if (this.stickyContentBottom) {\n      distance =\n        container.clientHeight - footerStickyVisibleContainer.offsetHeight + this.stickyContentBottom.offsetTop;\n    }\n\n    return distance;\n  };\n\n  private _getNonStickyDistanceFromTop = (container: HTMLElement): number => {\n    let distance = 0;\n    let currElem = this.root;\n\n    if (currElem) {\n      while (currElem && currElem.offsetParent !== container) {\n        distance += currElem.offsetTop;\n        currElem = currElem.offsetParent as HTMLDivElement;\n      }\n\n      if (currElem && currElem.offsetParent === container) {\n        distance += currElem.offsetTop;\n      }\n    }\n    return distance;\n  };\n\n  // Gets background of nearest parent element that has a declared background-color attribute\n  private _getBackground(): string | undefined {\n    if (!this.root) {\n      return undefined;\n    }\n\n    let curr: HTMLElement = this.root;\n\n    while (\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'rgba(0, 0, 0, 0)' ||\n      window.getComputedStyle(curr).getPropertyValue('background-color') === 'transparent'\n    ) {\n      if (curr.tagName === 'HTML') {\n        // Fallback color if no element has a declared background-color attribute\n        return undefined;\n      }\n      if (curr.parentElement) {\n        curr = curr.parentElement;\n      }\n    }\n    return window.getComputedStyle(curr).getPropertyValue('background-color');\n  }\n}\n\nfunction _isOffsetHeightDifferent(a: React.RefObject<HTMLElement>, b: React.RefObject<HTMLDivElement>): boolean {\n  return (a && b && a.current && b.current && a.current.offsetHeight !== b.current.offsetHeight) as boolean;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}