{"ast":null,"code":"import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n  var _a = React.useState(getInitialResponsiveMode()),\n    lastResponsiveMode = _a[0],\n    setLastResponsiveMode = _a[1];\n  var onResize = React.useCallback(function () {\n    var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n    // Setting the same value should not cause a re-render.\n    if (lastResponsiveMode !== newResponsiveMode) {\n      setLastResponsiveMode(newResponsiveMode);\n    }\n  }, [elementRef, lastResponsiveMode]);\n  var win = useWindow();\n  useOnEvent(win, 'resize', onResize);\n  // Call resize function initially on mount, or if the override changes from defined to undefined\n  // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n  React.useEffect(function () {\n    if (overrideResponsiveMode === undefined) {\n      onResize();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n  }, [overrideResponsiveMode]);\n  return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};","map":{"version":3,"names":["React","getWindow","useOnEvent","getResponsiveMode","getInitialResponsiveMode","useWindow","useResponsiveMode","elementRef","overrideResponsiveMode","_a","useState","lastResponsiveMode","setLastResponsiveMode","onResize","useCallback","newResponsiveMode","current","win","useEffect","undefined"],"sources":["/workspaces/ZapVibes/node_modules/@fluentui/react/lib/utilities/hooks/useResponsiveMode.js"],"sourcesContent":["import * as React from 'react';\nimport { getWindow } from '@fluentui/utilities';\nimport { useOnEvent } from '@fluentui/react-hooks';\nimport { getResponsiveMode, getInitialResponsiveMode } from '../decorators/withResponsiveMode';\nimport { useWindow } from '../../WindowProvider';\n/**\n * Hook to get the current responsive mode (window size category).\n * @param elementRef - Use this element's parent window when determining the responsive mode.\n * @param overrideResponsiveMode - Override the responsive mode. If this param is present, it's always returned.\n */\nexport var useResponsiveMode = function (elementRef, overrideResponsiveMode) {\n    var _a = React.useState(getInitialResponsiveMode()), lastResponsiveMode = _a[0], setLastResponsiveMode = _a[1];\n    var onResize = React.useCallback(function () {\n        var newResponsiveMode = getResponsiveMode(getWindow(elementRef.current));\n        // Setting the same value should not cause a re-render.\n        if (lastResponsiveMode !== newResponsiveMode) {\n            setLastResponsiveMode(newResponsiveMode);\n        }\n    }, [elementRef, lastResponsiveMode]);\n    var win = useWindow();\n    useOnEvent(win, 'resize', onResize);\n    // Call resize function initially on mount, or if the override changes from defined to undefined\n    // (the effect will run on all override changes, but onResize will only be called if it changed to undefined)\n    React.useEffect(function () {\n        if (overrideResponsiveMode === undefined) {\n            onResize();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps -- only meant to run on mount or when override changes\n    }, [overrideResponsiveMode]);\n    return overrideResponsiveMode !== null && overrideResponsiveMode !== void 0 ? overrideResponsiveMode : lastResponsiveMode;\n};\n//# sourceMappingURL=useResponsiveMode.js.map"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,SAAS,QAAQ,qBAAqB;AAC/C,SAASC,UAAU,QAAQ,uBAAuB;AAClD,SAASC,iBAAiB,EAAEC,wBAAwB,QAAQ,kCAAkC;AAC9F,SAASC,SAAS,QAAQ,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,iBAAiB,GAAG,SAAAA,CAAUC,UAAU,EAAEC,sBAAsB,EAAE;EACzE,IAAIC,EAAE,GAAGT,KAAK,CAACU,QAAQ,CAACN,wBAAwB,CAAC,CAAC,CAAC;IAAEO,kBAAkB,GAAGF,EAAE,CAAC,CAAC,CAAC;IAAEG,qBAAqB,GAAGH,EAAE,CAAC,CAAC,CAAC;EAC9G,IAAII,QAAQ,GAAGb,KAAK,CAACc,WAAW,CAAC,YAAY;IACzC,IAAIC,iBAAiB,GAAGZ,iBAAiB,CAACF,SAAS,CAACM,UAAU,CAACS,OAAO,CAAC,CAAC;IACxE;IACA,IAAIL,kBAAkB,KAAKI,iBAAiB,EAAE;MAC1CH,qBAAqB,CAACG,iBAAiB,CAAC;IAC5C;EACJ,CAAC,EAAE,CAACR,UAAU,EAAEI,kBAAkB,CAAC,CAAC;EACpC,IAAIM,GAAG,GAAGZ,SAAS,CAAC,CAAC;EACrBH,UAAU,CAACe,GAAG,EAAE,QAAQ,EAAEJ,QAAQ,CAAC;EACnC;EACA;EACAb,KAAK,CAACkB,SAAS,CAAC,YAAY;IACxB,IAAIV,sBAAsB,KAAKW,SAAS,EAAE;MACtCN,QAAQ,CAAC,CAAC;IACd;IACA;EACJ,CAAC,EAAE,CAACL,sBAAsB,CAAC,CAAC;EAC5B,OAAOA,sBAAsB,KAAK,IAAI,IAAIA,sBAAsB,KAAK,KAAK,CAAC,GAAGA,sBAAsB,GAAGG,kBAAkB;AAC7H,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}