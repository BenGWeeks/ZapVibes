{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n(function (ResponsiveMode) {\n  /** Width \\<= 479px */\n  ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n  /** Width \\> 479px and \\<= 639px */\n  ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n  /** Width \\> 639px and \\<= 1023px */\n  ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n  /** Width \\> 1023px and \\<= 1365px */\n  ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n  /** Width \\> 1365px and \\<= 1919px */\n  ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n  /** Width \\> 1919px */\n  ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n  ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode) {\n  _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element) {\n  var currentWindow = getWindow(element);\n  if (currentWindow) {\n    getResponsiveMode(currentWindow);\n  }\n}\nexport function getInitialResponsiveMode() {\n  var _a;\n  return (_a = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;\n}\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode(ComposedComponent) {\n  var _a;\n  // eslint-disable-next-line deprecation/deprecation\n  var resultClass = (_a = /** @class */function (_super) {\n    __extends(WithResponsiveMode, _super);\n    function WithResponsiveMode(props) {\n      var _this = _super.call(this, props) || this;\n      _this._onResize = function () {\n        var responsiveMode = getResponsiveMode(_this.context.window);\n        if (responsiveMode !== _this.state.responsiveMode) {\n          _this.setState({\n            responsiveMode: responsiveMode\n          });\n        }\n      };\n      _this._events = new EventGroup(_this);\n      _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n      _this.state = {\n        responsiveMode: getInitialResponsiveMode()\n      };\n      return _this;\n    }\n    WithResponsiveMode.prototype.componentDidMount = function () {\n      this._events.on(this.context.window, 'resize', this._onResize);\n      this._onResize();\n    };\n    WithResponsiveMode.prototype.componentWillUnmount = function () {\n      this._events.dispose();\n    };\n    WithResponsiveMode.prototype.render = function () {\n      var responsiveMode = this.state.responsiveMode;\n      return responsiveMode === ResponsiveMode.unknown ? null : React.createElement(ComposedComponent, __assign({\n        ref: this._updateComposedComponentRef,\n        responsiveMode: responsiveMode\n      }, this.props));\n    };\n    return WithResponsiveMode;\n  }(BaseDecorator), _a.contextType = WindowContext, _a);\n  return hoistStatics(ComposedComponent, resultClass);\n}\nfunction getWidthOfCurrentWindow(currentWindow) {\n  try {\n    return currentWindow.document.documentElement.clientWidth;\n  } catch (e) {\n    return currentWindow.innerWidth;\n  }\n}\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow) {\n  var responsiveMode = ResponsiveMode.small;\n  if (currentWindow) {\n    try {\n      while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n        responsiveMode++;\n      }\n    } catch (e) {\n      // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n      responsiveMode = getInitialResponsiveMode();\n    }\n    // Tracking last mode just gives us a better default in future renders,\n    // which avoids starting with the wrong value if we've measured once.\n    _lastMode = responsiveMode;\n  } else {\n    if (_defaultMode !== undefined) {\n      responsiveMode = _defaultMode;\n    } else {\n      throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' + 'Call setResponsiveMode to define what the responsive mode is.');\n    }\n  }\n  return responsiveMode;\n}","map":{"version":3,"names":["__assign","__extends","React","BaseDecorator","getWindow","hoistStatics","EventGroup","WindowContext","ResponsiveMode","RESPONSIVE_MAX_CONSTRAINT","_defaultMode","_lastMode","setResponsiveMode","responsiveMode","initializeResponsiveMode","element","currentWindow","getResponsiveMode","getInitialResponsiveMode","_a","large","withResponsiveMode","ComposedComponent","resultClass","_super","WithResponsiveMode","props","_this","call","_onResize","context","window","state","setState","_events","_updateComposedComponentRef","bind","prototype","componentDidMount","on","componentWillUnmount","dispose","render","unknown","createElement","ref","contextType","getWidthOfCurrentWindow","document","documentElement","clientWidth","e","innerWidth","small","undefined","Error"],"sources":["/workspaces/ZapVibes/node_modules/@fluentui/react/lib/utilities/decorators/withResponsiveMode.js"],"sourcesContent":["import { __assign, __extends } from \"tslib\";\nimport * as React from 'react';\nimport { BaseDecorator } from './BaseDecorator';\nimport { getWindow, hoistStatics, EventGroup } from '../../Utilities';\nimport { WindowContext } from '../../WindowProvider';\nexport var ResponsiveMode;\n(function (ResponsiveMode) {\n    /** Width \\<= 479px */\n    ResponsiveMode[ResponsiveMode[\"small\"] = 0] = \"small\";\n    /** Width \\> 479px and \\<= 639px */\n    ResponsiveMode[ResponsiveMode[\"medium\"] = 1] = \"medium\";\n    /** Width \\> 639px and \\<= 1023px */\n    ResponsiveMode[ResponsiveMode[\"large\"] = 2] = \"large\";\n    /** Width \\> 1023px and \\<= 1365px */\n    ResponsiveMode[ResponsiveMode[\"xLarge\"] = 3] = \"xLarge\";\n    /** Width \\> 1365px and \\<= 1919px */\n    ResponsiveMode[ResponsiveMode[\"xxLarge\"] = 4] = \"xxLarge\";\n    /** Width \\> 1919px */\n    ResponsiveMode[ResponsiveMode[\"xxxLarge\"] = 5] = \"xxxLarge\";\n    ResponsiveMode[ResponsiveMode[\"unknown\"] = 999] = \"unknown\";\n})(ResponsiveMode || (ResponsiveMode = {}));\nvar RESPONSIVE_MAX_CONSTRAINT = [479, 639, 1023, 1365, 1919, 99999999];\n/**\n * User specified mode to default to, useful for server side rendering scenarios.\n */\nvar _defaultMode;\n/**\n * Tracking the last mode we successfully rendered, which allows us to\n * paint initial renders with the correct size.\n */\nvar _lastMode;\n/**\n * Allows a server rendered scenario to provide a **default** responsive mode.\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function setResponsiveMode(responsiveMode) {\n    _defaultMode = responsiveMode;\n}\n/**\n * Initializes the responsive mode to the current window size. This can be used to avoid\n * a re-render during first component mount since the window would otherwise not be measured\n * until after mounting.\n *\n * This WILL NOT trigger any updates to components that have already consumed the responsive mode!\n */\nexport function initializeResponsiveMode(element) {\n    var currentWindow = getWindow(element);\n    if (currentWindow) {\n        getResponsiveMode(currentWindow);\n    }\n}\nexport function getInitialResponsiveMode() {\n    var _a;\n    return (_a = _defaultMode !== null && _defaultMode !== void 0 ? _defaultMode : _lastMode) !== null && _a !== void 0 ? _a : ResponsiveMode.large;\n}\n/**\n * @deprecated Decorator usage is deprecated. Either call `getResponsiveMode` manually, or\n * use the `useResponsiveMode` hook within a function component.\n */\nexport function withResponsiveMode(ComposedComponent) {\n    var _a;\n    // eslint-disable-next-line deprecation/deprecation\n    var resultClass = (_a = /** @class */ (function (_super) {\n            __extends(WithResponsiveMode, _super);\n            function WithResponsiveMode(props) {\n                var _this = _super.call(this, props) || this;\n                _this._onResize = function () {\n                    var responsiveMode = getResponsiveMode(_this.context.window);\n                    if (responsiveMode !== _this.state.responsiveMode) {\n                        _this.setState({\n                            responsiveMode: responsiveMode,\n                        });\n                    }\n                };\n                _this._events = new EventGroup(_this);\n                _this._updateComposedComponentRef = _this._updateComposedComponentRef.bind(_this);\n                _this.state = {\n                    responsiveMode: getInitialResponsiveMode(),\n                };\n                return _this;\n            }\n            WithResponsiveMode.prototype.componentDidMount = function () {\n                this._events.on(this.context.window, 'resize', this._onResize);\n                this._onResize();\n            };\n            WithResponsiveMode.prototype.componentWillUnmount = function () {\n                this._events.dispose();\n            };\n            WithResponsiveMode.prototype.render = function () {\n                var responsiveMode = this.state.responsiveMode;\n                return responsiveMode === ResponsiveMode.unknown ? null : (React.createElement(ComposedComponent, __assign({ ref: this._updateComposedComponentRef, responsiveMode: responsiveMode }, this.props)));\n            };\n            return WithResponsiveMode;\n        }(BaseDecorator)),\n        _a.contextType = WindowContext,\n        _a);\n    return hoistStatics(ComposedComponent, resultClass);\n}\nfunction getWidthOfCurrentWindow(currentWindow) {\n    try {\n        return currentWindow.document.documentElement.clientWidth;\n    }\n    catch (e) {\n        return currentWindow.innerWidth;\n    }\n}\n/**\n * Hook to get the current responsive mode (window size category).\n * @param currentWindow - Use this window when determining the responsive mode.\n */\nexport function getResponsiveMode(currentWindow) {\n    var responsiveMode = ResponsiveMode.small;\n    if (currentWindow) {\n        try {\n            while (getWidthOfCurrentWindow(currentWindow) > RESPONSIVE_MAX_CONSTRAINT[responsiveMode]) {\n                responsiveMode++;\n            }\n        }\n        catch (e) {\n            // Return a best effort result in cases where we're in the browser but it throws on getting innerWidth.\n            responsiveMode = getInitialResponsiveMode();\n        }\n        // Tracking last mode just gives us a better default in future renders,\n        // which avoids starting with the wrong value if we've measured once.\n        _lastMode = responsiveMode;\n    }\n    else {\n        if (_defaultMode !== undefined) {\n            responsiveMode = _defaultMode;\n        }\n        else {\n            throw new Error('Content was rendered in a server environment without providing a default responsive mode. ' +\n                'Call setResponsiveMode to define what the responsive mode is.');\n        }\n    }\n    return responsiveMode;\n}\n//# sourceMappingURL=withResponsiveMode.js.map"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}